1)Сериализация — это процесс преобразования сложных структур данных, таких как объекты, массивы, словари и т.д., в более простой формат, который может быть сохранён в файле или передан через сеть. Сериализация используется для сохранения состояния объектов или передачи данных между программами.

Десериализация — это обратный процесс, при котором данные, ранее сериализованные, восстанавливаются в исходную сложную структуру данных. Десериализация выполняется с целью использования или анализа этих данных в программе.

2)Основные шаги при работе с потоками:
1)Открытие потока — создание экземпляра потока (например, FileInputStream, FileOutputStream, BufferedReader, BufferedWriter).
2)Чтение/запись данных — выполнение операций чтения или записи через методы потока (например, read(), write()).
3)Закрытие потока — освобождение ресурсов, связанных с потоком, через метод close().

3)В Java существуют два основных типа потоков: пользовательские потоки и потоки-демоны.

Пользовательские потоки — это потоки, которые созданы для выполнения основных задач приложения. Они продолжают работать до тех пор, пока их задачи не будут завершены или пока приложение не завершит их принудительно. Эти потоки являются важной частью работы приложения и зачастую используются для задач, которые требуют активного взаимодействия с пользователем или выполнения значительных вычислений.

Потоки-демоны — это фоновые потоки, которые поддерживают работу пользовательских потоков. Они выполняют второстепенные задачи и не препятствуют завершению работы JVM. Если все пользовательские потоки завершили работу, JVM завершает свою работу, не дожидаясь завершения потоков-демонов.

4)IO:
Блокирующие операции: операции ввода/вывода блокируют поток до завершения операции.
Потоковая модель: данные читаются/записываются по одному байту или символу за раз.
Простота использования: IO API проще и интуитивно понятнее.
Меньшая производительность: Из-за блокировки и отсутствия масштабируемости.

NIO:
Неблокирующие операции: позволяет проводить асинхронный ввод/вывод, поток может продолжить выполнение других задач.
Буферная модель: данные сначала загружаются в буфер, затем обрабатываются.
Использует каналы и буферы: Channel и Buffer для работы с данными.
Поддержка селекторов: Selector позволяет одному потоку управлять несколькими каналами.